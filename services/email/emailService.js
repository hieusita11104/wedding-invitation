const nodemailer = require("nodemailer");
const { otpTemplate, welcomeTemplate } = require("./emailTemplates");

// C·∫•u h√¨nh nodemailer
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// Test k·∫øt n·ªëi email khi kh·ªüi ƒë·ªông
const testEmailConnection = async () => {
  try {
    await transporter.verify();
    console.log("‚úÖ Email service connected successfully");
  } catch (error) {
    console.error("‚ùå Email service connection failed:", error.message);
    console.error("Please check your EMAIL_USER and EMAIL_PASS environment variables");
  }
};

// G·ªçi test khi module ƒë∆∞·ª£c load
testEmailConnection();

// G·ª≠i email OTP
exports.sendOTPEmail = async (user, otp) => {
  try {
    console.log("Sending OTP email to:", user.email);
    console.log("User data:", { name: user.name, email: user.email });
    console.log("OTP:", otp);

    const htmlContent = otpTemplate(user, otp);
    
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: user.email,
      subject: "üîê M√£ OTP X√°c Th·ª±c - Wedding Invitation System",
      text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}. M√£ n√†y c√≥ hi·ªáu l·ª±c trong 60 gi√¢y.`,
      html: htmlContent
    };

    const result = await transporter.sendMail(mailOptions);
    console.log("‚úÖ OTP email sent successfully to:", user.email);
    console.log("Message ID:", result.messageId);
    return { success: true, message: "Email sent successfully", messageId: result.messageId };
  } catch (error) {
    console.error("‚ùå Error sending OTP email:", error);
    console.error("Error details:", {
      code: error.code,
      command: error.command,
      response: error.response,
      responseCode: error.responseCode
    });
    throw new Error(`Failed to send OTP email: ${error.message}`);
  }
};

// G·ª≠i email ch√†o m·ª´ng
exports.sendWelcomeEmail = async (user) => {
  try {
    console.log("Sending welcome email to:", user.email);
    
    const htmlContent = welcomeTemplate(user);
    
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: user.email,
      subject: "üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Wedding Invitation System",
      text: `Ch√†o m·ª´ng ${user.name} ƒë·∫øn v·ªõi Wedding Invitation System!`,
      html: htmlContent
    };

    const result = await transporter.sendMail(mailOptions);
    console.log("‚úÖ Welcome email sent successfully to:", user.email);
    console.log("Message ID:", result.messageId);
    return { success: true, message: "Welcome email sent successfully", messageId: result.messageId };
  } catch (error) {
    console.error("‚ùå Error sending welcome email:", error);
    console.error("Error details:", {
      code: error.code,
      command: error.command,
      response: error.response
    });
    throw new Error(`Failed to send welcome email: ${error.message}`);
  }
};

// G·ª≠i email t√πy ch·ªânh
exports.sendCustomEmail = async (to, subject, textContent, htmlContent) => {
  try {
    console.log("Sending custom email to:", to);
    
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: to,
      subject: subject,
      text: textContent,
      html: htmlContent
    };

    const result = await transporter.sendMail(mailOptions);
    console.log("‚úÖ Custom email sent successfully to:", to);
    console.log("Message ID:", result.messageId);
    return { success: true, message: "Custom email sent successfully", messageId: result.messageId };
  } catch (error) {
    console.error("‚ùå Error sending custom email:", error);
    console.error("Error details:", {
      code: error.code,
      command: error.command,
      response: error.response
    });
    throw new Error(`Failed to send custom email: ${error.message}`);
  }
}; 